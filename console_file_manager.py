"""
Задание:
1. Где это возможно переписать код с использованием генераторов и тернарных операторов;
2. Там где возможны исключительные ситуации добавить обработку исключений;
3. *Где это возможно применить декораторы.
Иногда может быть так, что применить новые возможности негде, особенно декораторы - это нормально.



В задании к уроку 13 "Работа с файлами. Кодировки, сериализация данных, json" написано:
5. В программе консольный файловый менеджер есть пункт
   "просмотр содержимого рабочей директории";
6. Добавить пункт "сохранить содержимое рабочей директории в файл";

7. При выборе этого пункта создать файл listdir.txt (если он есть,
   то пересоздать) и сохранить туда содержимое рабочей
   директории следующим образом: сначала все файлы, потом все папки.
   Пример как может выглядеть итоговый файл:
     files: victory.py, bill.py, main.py
     dirs: modules, packages


В задании к уроку 11 "Модули и пакеты" написано:
1. Создать новый проект "Консольный файловый менеджер"
2. В проекте реализовать следующий функционал:
После запуска программы пользователь видит меню, состоящее из следующих пунктов:
- создать папку;
- удалить (файл/папку);
- копировать (файл/папку);
- просмотр содержимого рабочей директории;
- посмотреть только папки;
- посмотреть только файлы;
- просмотр информации об операционной системе;
- создатель программы;
- играть в викторину;
- мой банковский счет;
- смена рабочей директории (*необязательный пункт);
- выход.
Так же можно добавить любой дополнительный функционал по желанию.

Описание пунктов:
- создать папку
после выбора пользователь вводит название папки, создаем её в рабочей директории;
- удалить (файл/папку)
после выбора пользователь вводит название папки или файла, удаляем из рабочей директории если такой есть;
- копировать (файл/папку)
после выбора пользователь вводит название папки/файла и новое название папки/файла. Копируем;
- просмотр содержимого рабочей директории
вывод всех объектов в рабочей папке;
- посмотреть только папки
вывод только папок которые находятся в рабочей папке;
- посмотреть только файлы
вывод только файлов которые находятся в рабочей папке;
- просмотр информации об операционной системе
вывести информацию об операционной системе (можно использовать пример из 1-го урока);
- создатель программы
вывод информации о создателе программы;
- играть в викторину
запуск игры викторина из предыдущего дз;
- мой банковский счет
запуск программы для работы с банковским счетом из предыдущего дз (задание учебное, после выхода из программы управлением счетом в главной программе сумму и историю покупок можно не запоминать);
- смена рабочей директории (*необязательный пункт)
усложненное задание пользователь вводит полный /home/user/... или относительный user/my/... путь. Меняем рабочую директорию на ту что ввели и работаем уже в ней;
- выход
выход из программы.
Так же можно добавить любой другой интересный или полезный функционал по своему желанию
После выполнения какого либо из пунктов снова возвращаемся в меню, пока пользователь не выберет выход

"""
import json
from os.path import isfile

from lesson09_m04_victory import quiz
from personal_account import personal_account

import os         # Интерфейсы операционной системы
import shutil     # операции над файлами/каталогами
import platform   # информация о компьютере и  о системе
import sys        # Параметры и функции конфигурации Python


def show_FilesDirs(show=True, check=os.path.isfile):
    '''
    выборка только файлов или только папок которые находятся в рабочей папке
    :param show:
           - True: печатать файлы или папки, которые находятся в рабочей папке
           - False: сохранять в список файлы или папки, которые находятся в рабочей папке
    :param f: Указывает что именно надо выбирать из рабочей дирректории
           - os.path.isfile: Выбираем файлы
           - os.path.isdir: Выбираем папки
    :return: Возвращает:
           - если параметр show=True: пустой список
           - если параметр show=False: список файлов или папок в зависимости от значения параметра f
    '''
    lst_name = []
    with os.scandir(os.getcwd()) as files:
        for file in files:
            if check(file):
                if show:
                    print('   ', file.name)
                else:
                    lst_name.append(file.name)
    return lst_name


def add_sep(func):
    # inner - итоговая функция с новым поведение
    def inner(*arg, **kwargs):
        # Действия до функции
        print('\n' + '*' * 10 + ' Начало выполнения декоратора ' + '*' * 10)
        result = func(*arg, **kwargs)
        # Действия после функции
        print('*' * 10 + ' Декоратор закончил выполняться ' + '*' * 10 + '\n')
        return result
    # возвращается функция inner с новым поведением
    return inner


@add_sep
def show_FilesDirs_decor(*arg, **kwargs):
    return show_FilesDirs(*arg, **kwargs)


print('\n\nВнимание!!!\nВводить цифры требуется только целые,\n' +
      'проверка корректности ввода не производится!\n')

while True:
    print(' 1. создать папку')
    print(' 2. удалить (файл/папку)')
    print(' 3. копировать (файл/папку)')
    print(' 4. просмотр содержимого рабочей директории')
    print(' 5. посмотреть только папки')
    print(' 6. посмотреть только файлы')
    print(' 7. просмотр информации об операционной системе')
    print(' 8. создатель программы')
    print(' 9. играть в викторину')
    print('10. мой банковский счет')
    print('11. смена рабочей директории')
    print('12. сохранить содержимое рабочей директории в файл')
    print('13. выход')

    choice = input('Выберите пункт меню: ')
    if choice == '1':
        # 1. создать папку.
        # после выбора пользователь вводит название папки, создаем её в рабочей директории
        folder_name = input('   Введите имя создаваемой папки: ')
        if not os.path.exists(folder_name):
            # Проверяем, имеется файл или папка с таким наименованием
            os.mkdir(folder_name)  # создать папку передаем путь
            print(f'   Создана папка {folder_name}')
            continue  # Переходим к выбору действия
        print(f'   Уже существует папка или файл с именем {folder_name}.\n   Операция отменена.')
    elif choice == '2':
        # 2. удалить (файл/папку).
        # после выбора пользователь вводит название папки или файла, удаляем из рабочей директории если такой есть;
        f_name = input('   Введите имя удаляемой папки/файла: ')
        # Проверяем, имеется файл или папка с таким наименованием
        if os.path.exists(f_name):
            # можно удалить файл или папку
            if os.path.isdir(f_name):
                # ввели имя каталога для удаления, так как каталог существует
                try:
                    os.rmdir(f_name)
                except OSError:
                    # Исключение OSError - ошибка, связанная с системой.
                    # Исключение OSError поднимается, например,
                    # когда каталог не является пустым каталогом.
                    # Или когда нет прав доступа к каталогу - исключение PermissionError
                    # является подклассом OSError() и поднимается при попытке запустить
                    # операцию без соответствующих прав доступа - например, прав доступа
                    # к файловой системе.

                    # проверяем, что папка пустая или нет
                    # Взято тут: https://translated.turbopages.org/proxy_u/en-ru.ru.9c53580a-62fb15fb-4c988b17-74722d776562/https/stackoverflow.com/questions/57968829/what-is-the-fastest-way-to-check-whether-a-directory-is-empty-in-python
                    # Вариант условия (len(os.listdir(dir_path)) == 0) может медленно работать с большими каталогами
                    # def dir_empty(dir_path):
                    #     return len(os.listdir(dir_path)) == 0
                    # остаются ваприанты:
                    # def dir_empty(dir_path):
                    #     return not any((True for _ in os.scandir(dir_path)))
                    # def dir_empty(dir_path):
                    #     return not next(os.scandir(dir_path), None)
                    if not next(os.scandir(f_name), None):
                        # Папка пустая, но всё равно какая-то ошибка.
                        # Удалить папку не получается
                        print(f'   Папка с именем {f_name} пустая,')
                        print('   но возкикла системная ошибка при её удалении.')
                        print('   Удаление отменено.')
                        continue  # Переходим к выбору действия
                    print(f'   Папка с именем {f_name} не пустая.')
                    if input('   Удалить папку со всем содержимым (д - да)?') == 'д':
                        # Удаляем текущую директорию и её всё содержимое
                        try:
                            shutil.rmtree(f_name)
                        except OSError:
                            # Исключение OSError - ошибка, связанная с системой.
                            print(f'   Произошла ошибка при удалении папки с именем {f_name}.')
                        else:
                            print(f'   Папка с именем {f_name} удалена.')
                        # Оператор try: shutil.rmtree(f_name) закончился
                    else:
                        print('   Удаление отменено.')
                    continue  # Переходим к выбору действия
                # Оператор try: os.rmdir(f_name) закончился
                print(f'   Папка с именем {f_name} удалена.')
                continue  # Переходим к выбору действия
            # удалить файл
            if os.path.isfile(f_name):
                # файл существует
                # В Windows попытка удалить используемый файл приводит к возникновению исключения.
                try:
                    os.remove(f_name)
                except PermissionError:
                    # PermissionError: [WinError 32] Процесс не может получить
                    # доступ к файлу, так как этот файл занят другим процессом
                    print('   Возникла ошибка при удалении файла.')
                    print(f'   Возможно файл с именем {f_name} используется в другом приложении.')
                    print(f'\n   Удалить файл с именем {f_name} не получилось.')
                else:
                    print(f'   Файл с именем {f_name} удалён.')
                continue  # Переходим к выбору действия
        print(f'   отсутствует папка/файл с именем {f_name}.')
    elif choice == '3':
        # 3. копировать (файл/папку).
        # после выбора пользователь вводит название папки/файла и новое название папки/файла. Копируем;
        print('   операция копирования папки/файла')
        f_name_src = input('   Введите имя исходной(-ого) папки/файла: ')
        f_name_dst = input('   Введите имя итоговой(-ого) папки/файла: ')
        if os.path.isdir(f_name_src):
            # надо копировать каталог
            try:
                shutil.copytree(f_name_src, f_name_dst)
            except OSError:
                # Исключение OSError - ошибка, связанная с системой.
                # Например, не хватает места на диске.
                print(f'   Произошла ошибка при копировании папки с именем {f_name_src} в {f_name_dst}.')
            else:
                print(f'   Папка с именем {f_name_src} скопирована в {f_name_dst}.')
            # Оператор try: shutil.copytree(f_name_src, f_name_dst) закончился
            continue  # Переходим к выбору действия

        if os.path.isfile(f_name_src):
            try:
                shutil.copy(f_name_src, f_name_dst)
            except OSError:
                # Исключение OSError - ошибка, связанная с системой.
                # Например, не хватает места на диске.
                print(f'   Произошла ошибка при копировании файла с именем {f_name_src} в {f_name_dst}.')
            else:
                print(f'   Файл с именем {f_name_src} скопирован в {f_name_dst}.')
            # Оператор try: shutil.copy(f_name_src, f_name_dst) закончился
            continue  # Переходим к выбору действия
        print(f'   Отсутствует файл/папка с именем {f_name_src}.\nОперация не выполнена')
        # continue  # Переходим к выбору действия
    elif choice == '4':
        # 4. просмотр содержимого рабочей директории.
        # вывод всех объектов в рабочей папке;
        # список файлов и папок
        print('   Просмотр содержимого рабочей директории - список файлов и папок')
        print(sorted(os.listdir()))
        # print(os.listdir())
        # continue  # Переходим к выбору действия
    elif choice == '5':
        # 5. посмотреть только папки
        # вывод только папок которые находятся в рабочей папке;
        print('   Просмотр содержимого рабочей директории - только папки')
        show_FilesDirs(check=os.path.isdir)
        show_FilesDirs_decor(check=os.path.isdir)
        # continue  # Переходим к выбору действия
    elif choice == '6':
        # 6. посмотреть только файлы
        # вывод только файлов которые находятся в рабочей папке;
        print('   Просмотр содержимого рабочей директории - только файлы')
        show_FilesDirs()
        show_FilesDirs_decor()
        # continue  # Переходим к выбору действия
    elif choice == '7':
        # 7. просмотр информации об операционной системе
        # вывести информацию об операционной системе
        # (можно использовать пример из 1-го урока);
        print('   идентификатор платформы:', sys.platform)
        print('   имя операционной системы:', platform.system())
        print('   базовая платформа:', platform.platform())
        print('   выпуск системы:', platform.release())
        print('   версия выпуска системы:', platform.version())
        print('   тип машины:', platform.machine())
        print('   сетевое имя компьютера (может быть не полностью):', platform.node())
        print('   реальное имя процессора:', platform.processor())
        print('   номер и дата сборки Python:', platform.python_build())
        print('   компилятор, используемый для компиляции Python:', platform.python_compiler())
        # continue  # Переходим к выбору действия
    elif choice == '8':
        # 8. создатель программы
        # вывод информации о создателе программы;
        print('   Создатель программы:')
        print('   Тут выводится информация о создателе программы')
        print('   (ФИО, эл.адрес, телефон и прочее).')
        # continue  # Переходим к выбору действия
    elif choice == '9':
        # 9. играть в викторину
        # запуск игры викторина из предыдущего дз;
        quiz()
        # continue  # Переходим к выбору действия
    elif choice == '10':
        # 10. мой банковский счет
        # запуск программы для работы с банковским счетом
        # из предыдущего дз (задание учебное, после выхода
        # из программы управлением счетом в главной программе
        # сумму и историю покупок можно не запоминать);

        # Проверяем, что существует файл с историей.
        file_name_data_personal_account = 'data_personal_account_json.txt'
        if isfile(file_name_data_personal_account):
            # Если файл с историей существует, то историю загружаем.
            # Корректность данных не проверяем
            with open(file_name_data_personal_account, 'r') as f:
                account, account_lst, history_lst = json.load(f)
            print('Файл с историей загружен.')
        else:
            # Если файл с историей отсутстует, то
            # инициируем переменные нулевыми значениями.
            account = 0  # Исходное состояние счёта
            account_lst = []  # Список хранит историю поступлений и списаний со счёта.
            history_lst = []  # Список хранит историю покупок.
            # Будет храниться в виде кортежей (название покупки, сумма покупки).
            # То есть, итоговый список с историей будет примерно такой:
            # [('Наименование1', 100), ('Наименование2', 200)]

        account, account_lst, history_lst = personal_account(account=account,
                                                             account_lst=account_lst,
                                                             history_lst=history_lst)
        # Сохранение истории в файл
        try:
            # Источник:
            # https://docs-python.ru/standart-library/modul-json-python/funktsija-dump-modulja-json/
            #     ensure_ascii=True - экранирование не-ASCII символов,
            # Когда аргумент ensure_ascii=True, все не-ASCII символы в выводе будут
            # экранированы последовательностями \uXXXX.
            # Если ensure_ascii=False, эти символы будут записаны как есть.
            with open(file_name_data_personal_account, 'w') as f:
                json.dump((account, account_lst, history_lst), f, ensure_ascii=False)
        except OSError:
            # Исключение OSError - ошибка, связанная с системой.
            # Например, не хватает места на диске.
            print(f'   Произошла ошибка при сохранении истории.')
        # Оператор try: with open('data_json.txt', 'w') as f: закончился
    elif choice == '11':
        # 11. смена рабочей директории
        # усложненное задание пользователь вводит полный /home/user/...
        # или относительный user/my/... путь. Меняем рабочую директорию
        # на ту что ввели и работаем уже в ней;
        print('   Текущий рабочий каталог:', os.getcwd())
        f_name = input('   Введите имя каталога, который должен ' +
                       'стать новым текущим каталогом: ')
        if os.path.isdir(f_name):
            try:
                os.chdir(f_name)
                # Эта функция может вызывать исключение OSError и подклассы,
                # такие как FileNotFoundError, PermissionError и NotADirectoryError.
                # Ошибки FileNotFoundError, NotADirectoryError отсекаются проверкой
                # if os.path.isdir(f_name).
                # Поэтому остаётся проверить только PermissionError
                print('   Новый текущий рабочий каталог:', os.getcwd())
                continue  # Переходим к выбору действия
            # except FileNotFoundError:
            # except NotADirectoryError:
            except PermissionError:
                # Исключение PermissionError поднимается при попытке запустить
                # операцию без соответствующих прав доступа - например, прав
                # доступа к файловой системе
                print(f'   Нет соответствующих прав доступа для перехода на {f_name}')
        else:
            print('   Введённое имя не является каталогом.')
        print('   Ошибка при смене каталога. Операция не выполнена')
    elif choice == '12':
        # 12. сохранить содержимое рабочей директории в файл

        # lst_dir = show_FilesDirs(show=False, f=os.path.isdir)
        # lst_file = show_FilesDirs(show=False)
        data = 'files:'
        sep_str = ' '
        for i in show_FilesDirs(show=False):
            data += sep_str + i
            sep_str = ', '
        data += '\ndirs:'
        sep_str = ' '
        for i in show_FilesDirs(show=False, check=os.path.isdir):
            data += sep_str + i
            sep_str = ', '

        data += ('\n\nИспользуем декоратор.\nНичего не изменится (то есть, ' +
                'вывод в файл будет такой же как и ранее), так ' +
                'как декоратор только добавляет вывод в консоль.\n\nfiles:')
        sep_str = ' '
        for i in show_FilesDirs_decor(show=False):
            data += sep_str + i
            sep_str = ', '
        data += '\ndirs:'
        sep_str = ' '
        for i in show_FilesDirs_decor(show=False, check=os.path.isdir):
            data += sep_str + i
            sep_str = ', '

        # Сохранение в файл
        try:
            # Источник:
            # https://python-school.ru/blog/io-files/?ysclid=l6vzzgh3n4282073634
            # Если текст на русском языке, то можно посмотреть кодировки с поддержкой
            # кириллицы, которые есть в документации Python.
            # Например, явно указать UTF-8 или cp1251:
            # f = open('somefile.txt', encoding='utf-8')
            # # или cp1251
            # f = open('somefile.txt', encoding='cp1251')
            with open('data_files-dirs_json.txt', 'w', encoding="utf_8") as f:
                f.write(data)
        except OSError:
            # Исключение OSError - ошибка, связанная с системой.
            # Например, не хватает места на диске.
            print(f'   Произошла ошибка при сохранении истории.')
        else:
            print('   Содержимое рабочей директории сохранено в файл')
        # Оператор try: with open('data_files-dirs_json.txt', 'w', encoding="utf_8") as f: закончился
    elif choice == '13':
        # 13. выход
        # выход из программы.
        print('   выход из программы')
        break
    else:
        print('   Неверный пункт меню')

